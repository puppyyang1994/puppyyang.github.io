<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>09-Console</title>
    <link href="/2022/09/04/9-Console/"/>
    <url>/2022/09/04/9-Console/</url>
    
    <content type="html"><![CDATA[<h2 id="Console控制台"><a href="#Console控制台" class="headerlink" title="Console控制台"></a>Console控制台</h2><p>平时一般只用console的打印功能，今天的训练学习到了关于console的更多功能</p><h3 id="1-log"><a href="#1-log" class="headerlink" title="1.log"></a>1.log</h3><p>这个是最常用的，但它还有一些更多功能：比如参数支持类似 C 语言的字符串替换模式。</p><ul><li><code>%s</code> 字符串</li><li><code>%d</code> 整数</li><li><code>%f</code> 浮点值</li><li><code>%o</code> Object</li><li><code>%c</code> 设定输出的样式，在之后的文字将按照第二个参数里的值进行显示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;输出一个字符串 %s &quot;</span>, <span class="hljs-string">&quot;log&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;输出一个整数是 %d &quot;</span>, <span class="hljs-number">1.23</span>); <span class="hljs-comment">//1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;输出一个小数是 %f &quot;</span>, <span class="hljs-number">1.23</span>); <span class="hljs-comment">//1.23</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;%c不同样式的输出效果&quot;</span>, <span class="hljs-string">&quot;color: #00fdff; font-size: 2em;&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="2-不同样式的输出"><a href="#2-不同样式的输出" class="headerlink" title="2.不同样式的输出"></a>2.不同样式的输出</h3><p>除了常规的 <code>log</code> 之外，还有一些其他已设定好的样式，区别在于图标或者颜色不一样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// warning!</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">warn</span>(<span class="hljs-string">&quot;三角感叹号图标，淡黄色背景&quot;</span>)<br><span class="hljs-comment">// Error :|</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;红叉图标，红字红色背景&quot;</span>);<br><span class="hljs-comment">// Info</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">info</span>(<span class="hljs-string">&quot;蓝色圆形感叹号图标&quot;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-打印输出"><a href="#3-打印输出" class="headerlink" title="3.打印输出"></a>3.打印输出</h3><p>获取 DOM 元素之后，也可以打印输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;p&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(p);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(p);<br></code></pre></td></tr></table></figure><p>不同的地方在于，<code>log</code> 输出这个 DOM 的 HTML 标签，而 <code>dir</code> 则会输出这个 DOM 元素的属性列表。</p><h3 id="4-clear"><a href="#4-clear" class="headerlink" title="4. clear"></a>4. clear</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">clear</span>()<span class="hljs-comment">//Console was cleared</span><br><span class="hljs-comment">//快捷键ctrl+L</span><br></code></pre></td></tr></table></figure><h3 id="5-assert方法进行测试"><a href="#5-assert方法进行测试" class="headerlink" title="5.assert方法进行测试"></a>5.assert方法进行测试</h3><p> 接受一个表达式作为参数，如果参数返回值是 false，则会输出第二个参数中的内容。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-comment">// p.classList.contians()返回布尔类型；若传入的参数token包含在列表中时则返回true ，否则返回 false。</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">assert</span>(p.<span class="hljs-property">classList</span>.<span class="hljs-title function_">contains</span>(<span class="hljs-string">&#x27;ouch&#x27;</span>), <span class="hljs-string">&#x27;That is wrong&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="6-清晰呈现数据"><a href="#6-清晰呈现数据" class="headerlink" title="6.清晰呈现数据"></a>6.清晰呈现数据</h3><ol><li><p>console.table()  可以将数组、对象以表格的形式打印输出，如果只输出其中的某一列，可以加上第二个参数，示例如下。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(dogs);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">table</span>(dogs, [<span class="hljs-string">&quot;age&quot;</span>]);<br></code></pre></td></tr></table></figure></li><li><p>将数据分组展示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">const</span> dogs = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Snickers&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;hugo&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">8</span> &#125;];<br>dogs.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">dog</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">group</span>();<br><span class="hljs-comment">//console.groupCollapsed();  // 收起列表</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dog.name&#125;</span>`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dog.age&#125;</span>`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;dog.name&#125;</span> 有 <span class="hljs-subst">$&#123;dog.age&#125;</span> 岁了`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">groupEnd</span>();<br>&#125;);<br><span class="hljs-comment">// group/groupCollapsed 和 groupEnd之间的内容会自动分组</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="7-count计数"><a href="#7-count计数" class="headerlink" title="7.count计数"></a>7.count计数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;Wes&#x27;</span>) <span class="hljs-comment">//Wes: 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;Wes&#x27;</span>) <span class="hljs-comment">//Wes: 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;puppy&#x27;</span>) <span class="hljs-comment">//puppy: 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;puppy&#x27;</span>) <span class="hljs-comment">//puppy: 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">count</span>(<span class="hljs-string">&#x27;puppy&#x27;</span>)<span class="hljs-comment">//puppy: 3</span><br></code></pre></td></tr></table></figure><h3 id="8-timing-计时"><a href="#8-timing-计时" class="headerlink" title="8.timing 计时"></a>8.timing 计时</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//异步数据的获取花费了多久时间</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">time</span>(<span class="hljs-string">&#x27;fetching data&#x27;</span>)<br>        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://api.github.com/users/wesbos&#x27;</span>)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> data.<span class="hljs-title function_">json</span>())<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">timeEnd</span>(<span class="hljs-string">&#x27;fetching data&#x27;</span>)<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>            &#125;)<br><span class="hljs-comment">// time(&#x27;&#x27;)和timeEnd(&#x27;&#x27;)分别控制开始计时和结束计时,里面参数的name要保持一致</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>08- HTML Canvas</title>
    <link href="/2022/09/02/08-HTML-Canvas/"/>
    <url>/2022/09/02/08-HTML-Canvas/</url>
    
    <content type="html"><![CDATA[<h3 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a>HTML5 Canvas</h3><p>之前没有做过和canvas相关的案例，今天总结一下canvas的基本用法</p><p><img src="/images/pasted-1.png" alt="upload successful"></p><p>1.在页面中放置一个canvas元素(HTML)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;canvas&gt;&lt;/canvas&gt;<br></code></pre></td></tr></table></figure><p>2.获取canvas元素和canvas元素的getContext(图像会在此被渲染)（JS）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#draw&#x27;</span>)<br><span class="hljs-keyword">const</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>) <span class="hljs-comment">//以2d方式渲染</span><br><span class="hljs-comment">//getContext()方法用来获得渲染上下文和它的绘画功能。</span><br></code></pre></td></tr></table></figure><p>3.让画布的大小和浏览器窗口的视口（viewport)的高度和宽度一致(JS)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">canvas.<span class="hljs-property">height</span> = windows.<span class="hljs-property">innerHeight</span><br>canvas.<span class="hljs-property">width</span> = windows.<span class="hljs-property">innerWidth</span><br></code></pre></td></tr></table></figure><p>4.设置图形轮廓的颜色strokeStyle</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#BADA55&#x27;</span><br></code></pre></td></tr></table></figure><p>5.设置线条</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-property">lineJoin</span> = <span class="hljs-string">&#x27;round&#x27;</span><span class="hljs-comment">// lineJoin设置线条与线条间结合处的样式</span><br>ctx.<span class="hljs-property">lineCap</span> = <span class="hljs-string">&#x27;round&#x27;</span><span class="hljs-comment">// lineCap 设置线条末端样式</span><br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">50</span> <span class="hljs-comment">//设置线条宽度</span><br></code></pre></td></tr></table></figure><p>6.绘制路径</p><p>   补充：HSL色彩模式是工业界的一种颜色标准，是通过对色相(H)、饱和度(S)、明度(L)三个颜色通道的变化以及它们相互之间的叠加来得到各式各样的颜色的，HSL即是代表色相，饱和度，明度三个通道的颜色，这个标准几乎包括了人类视力所能感知的所有颜色，是目前运用最广的颜色系统之一。为了颜色保持变化，在hue超过360时，将其变为0</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 首先，你需要创建路径起始点。</span><br><span class="hljs-comment">//2.然后你使用画图命令去画出路径。</span><br><span class="hljs-comment">//3.通过线条来绘制图形轮廓。</span><br><span class="hljs-comment">//定义两个全局变量： lastX 和lastY 初识为0</span><br><span class="hljs-keyword">let</span> lastX = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> lasY = <span class="hljs-number">0</span><br><span class="hljs-keyword">let</span> hue = <span class="hljs-number">0</span><br><span class="hljs-comment">//让direction控制线条大小渐变， 设置初始值为true</span><br><span class="hljs-keyword">let</span> direction = <span class="hljs-literal">true</span><br><span class="hljs-keyword">let</span> isDrawing = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-keyword">if</span>(!isDrawing) <span class="hljs-keyword">return</span>;<br>  ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">`hsl(<span class="hljs-subst">$&#123;hue&#125;</span>, 100%, 50%)`</span>;<br>    ctx.<span class="hljs-title function_">beginPath</span>(); <span class="hljs-comment">//调用beginPath()准备绘制一个新的形状路径</span><br>    <span class="hljs-comment">//绘制路径 此时还没有线条</span><br>    ctx.<span class="hljs-title function_">moveTo</span>(lastX, lastY); <span class="hljs-comment">//使用moveTo()函数移动到目标位置</span><br>    <span class="hljs-comment">//绘制线条</span><br>    ctx.<span class="hljs-title function_">lineTo</span>(e.<span class="hljs-property">offsetX</span>, e.<span class="hljs-property">offsetY</span>); <span class="hljs-comment">//lineTo(x, y)绘制一条从当前位置到指定xy位置的直线。</span><br>    ctx.<span class="hljs-title function_">stroke</span>();<span class="hljs-comment">//通过线条来绘制图形轮廓。</span><br>    <span class="hljs-comment">//ctx.fill()通过填充路径的内容区域生成实心的图形。</span><br>    <span class="hljs-comment">//使用数组解构，将解构出来的值赋值给x y</span><br>    [lastX, lastY] = [e.<span class="hljs-property">offsetX</span>, e.<span class="hljs-property">offsetY</span>]<span class="hljs-comment">//把当前的坐标当做起点</span><br>    hue++<br>      <span class="hljs-keyword">if</span>(hue&gt;=<span class="hljs-number">360</span>)&#123;<br>          hue = <span class="hljs-number">0</span><br>      &#125;<br>      <span class="hljs-comment">//当线条大于100或者小于1时，线条变化，direction控制线条的减少和增加</span><br>      <span class="hljs-keyword">if</span>(ctx.<span class="hljs-property">lineWidth</span> &gt;=<span class="hljs-number">100</span> ||ctx.<span class="hljs-property">lineWidth</span>)  &#123;<br>          direction = !direction<br>      &#125;  <br>      <span class="hljs-keyword">if</span>(direction)&#123;<br>          ctx.<span class="hljs-property">lineWidth</span>++<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          ctx.<span class="hljs-property">lineWidth</span>--<br>      &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>   7.事件监听部分</p><ul><li><p>单击鼠标-按下准备开始</p></li><li><p>移动鼠标-画线</p></li><li><p>松开手指-结束画线</p><p> 按下鼠标画出图像</p><pre><code class="hljs">canvas.addEventListener(&#39;mousedown&#39;, (e) =&gt; &#123;isDrawing = true[lastX, lastY] = [e.offsetX, e.offsetY]&#125;)</code></pre><p>设定 mousemove 事件监听触发的函数进行绘制。但是，只有 mousemove 事件监听时，只要鼠标在页面上划过都会触发函数。这时我们需要一个标记变量，来控制当前鼠标是不是处在按下的状态。</p><pre><code class="hljs">canvas.addEventListener(&#39;mousemove&#39;, draw)canvas.addEventListener(&#39;mouseup&#39;, ()=&gt; isDrawing = false)canvas.addEventListener(&#39;mouseuot&#39;, ()=&gt; isDrawing = false)</code></pre></li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript 30 days</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS现代教程-函数</title>
    <link href="/2022/08/30/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%87%BD%E6%95%B0/"/>
    <url>/2022/08/30/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>创建函数：函数声明 + 函数表达式 + 箭头函数</p><ol><li><strong>函数声明</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> userName = <span class="hljs-string">&#x27;John&#x27;</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"></span>) &#123;<br>            userName = <span class="hljs-string">&#x27;Bob&#x27;</span><br>            <span class="hljs-keyword">let</span> showMessage = <span class="hljs-string">&#x27;Hello&#x27;</span> + userName;<br>            <span class="hljs-title function_">alert</span>(showMessage)<br>        &#125;<br><span class="hljs-comment">// 在函数执行前</span><br>        <span class="hljs-title function_">alert</span>(userName)<span class="hljs-comment">//John</span><br><span class="hljs-comment">//函数必须先调用才能执行</span><br>        <span class="hljs-title function_">showMessage</span>() <span class="hljs-comment">//Bob</span><br><span class="hljs-title function_">alert</span>(userName)<span class="hljs-comment">//Bob</span><br></code></pre></td></tr></table></figure><p>2.<strong>全局变量和局部变量</strong>  如果函数内部有同名的变量，那函数会遮蔽外部变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> userName = <span class="hljs-string">&#x27;John&#x27;</span>;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"></span>) &#123;<br>           <span class="hljs-keyword">let</span> userName = <span class="hljs-string">&#x27;Bob&#x27;</span><br>            <span class="hljs-keyword">let</span> showMessage = <span class="hljs-string">&#x27;Hello&#x27;</span> + userName;<br>            <span class="hljs-title function_">alert</span>(showMessage)<br>        &#125;<br><br>        <span class="hljs-title function_">alert</span>(userName)<span class="hljs-comment">//John</span><br><span class="hljs-comment">// 函数会访问内部的userName 而不是外部的</span><br>        <span class="hljs-title function_">showMessage</span>() <span class="hljs-comment">//Bob</span><br><span class="hljs-title function_">alert</span>(userName)<span class="hljs-comment">//John</span><br></code></pre></td></tr></table></figure><p>3.参数 通过参数把任意数据传递给函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, text</span>) &#123;<br>           <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">from</span> + <span class="hljs-string">&#x27;:&#x27;</span> + text);<br>       &#125;<br><br>       <span class="hljs-title function_">showMessage</span>(<span class="hljs-string">&#x27;Ann&#x27;</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, text</span>) &#123;<br>            <span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-keyword">from</span> + <span class="hljs-string">&#x27;*&#x27;</span>;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">from</span> + <span class="hljs-string">&#x27;:&#x27;</span> + text)<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;Ann&#x27;</span><br>        <span class="hljs-title function_">showMessage</span>(<span class="hljs-keyword">from</span>, <span class="hljs-string">&#x27;Hello&#x27;</span>) <span class="hljs-comment">// *Ann*: Hello</span><br>        <span class="hljs-comment">// from 值未被修改 因为函数修改的是一个复制的局部变量值的副本，在函数外部是看不到更改的</span><br>        <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">from</span>) <span class="hljs-comment">//Ann</span><br></code></pre></td></tr></table></figure><ul><li>注意参数parameter和argument， argument是调用函数时传递给函数的值， parameter是函数声明中括号内列出的变量</li></ul><p>4.默认值</p><p>   如果一个函数被调用了，但存在argument未被提供，那么相应的值就会变成undefined</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, text</span>) &#123;<br>            <span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-keyword">from</span> + <span class="hljs-string">&#x27;*&#x27;</span>;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-keyword">from</span> + <span class="hljs-string">&#x27;:&#x27;</span> + text)<br>        &#125;<br><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">from</span> = <span class="hljs-string">&#x27;Ann&#x27;</span><br>        <span class="hljs-title function_">showMessage</span>(<span class="hljs-keyword">from</span>) <span class="hljs-comment">// *Ann*: undefined</span><br><br><span class="hljs-comment">// 可以用= 为函数声明中的参数指定默认值 (只有在没有给定参数的时候才会执行， 如果给定了参数，则不会执行)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, text= <span class="hljs-string">&#x27;no text given&#x27;</span></span>)&#123;&#125;<span class="hljs-comment">//字符串</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"><span class="hljs-keyword">from</span>, text = anotherFunction()</span>)&#123;&#125;<span class="hljs-comment">//函数</span><br><br><span class="hljs-comment">// 后备的默认参数， 将默认值的设置放在函数执行的时候</span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showMessage</span>(<span class="hljs-params">text</span>) &#123;<br>            <span class="hljs-keyword">if</span> (text === <span class="hljs-literal">undefined</span>) &#123;<br>                text = <span class="hljs-string">&#x27;empty message&#x27;</span><br>            &#125;<br>     <span class="hljs-comment">//或者  text = text || &#x27;empty&#x27;</span><br>            <span class="hljs-title function_">alert</span>(text)<br>        &#125;<br><br>        <span class="hljs-title function_">showMessage</span>() <span class="hljs-comment">// empty message</span><br><span class="hljs-comment">//也可使用 空值合并运算符??</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showCount</span>(<span class="hljs-params">count</span>) &#123;<br>  <span class="hljs-comment">// 如果 count 为 undefined 或 null，则提示 &quot;unknown&quot;</span><br>  <span class="hljs-title function_">alert</span>(count ?? <span class="hljs-string">&quot;unknown&quot;</span>);<br>&#125;<br><br><span class="hljs-title function_">showCount</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">// 0   在假值比如0 应该被视为正常值时更具有优势</span><br><span class="hljs-title function_">showCount</span>(<span class="hljs-literal">null</span>); <span class="hljs-comment">// unknown</span><br><span class="hljs-title function_">showCount</span>(); <span class="hljs-comment">// unknown</span><br></code></pre></td></tr></table></figure><p>   5.返回值</p><pre><code class="hljs">  - return 可以放在任何位置，执行到return时，函数停止。  - return可以不止一个。  - 只写return，不写返回值也是可以的。  - 如果要将return和返回值分行写 一定要给返回值加上（），否则会默认给return后面加上;函数返回值会变成undefined  - 没有return 或者return空值时，函数的返回值是undefined    <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">doNothing</span>(<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">doNothing</span>() === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">doNothing</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-title function_">alert</span>(<span class="hljs-title function_">doNothing</span>() === <span class="hljs-literal">undefined</span>) <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure>    </code></pre><p>   6.一个函数最好只有一个功能，多个功能通过多个函数来完成最好，比如下面两段代码</p><pre><code class="hljs">  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">showPrimes</span>(<span class="hljs-params">n</span>) &#123;<br>            <span class="hljs-attr">nextPrime</span>: <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = <span class="hljs-number">2</span>; j &lt; i; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span> nextPrime;<br>                &#125;<br><br>                <span class="hljs-title function_">alert</span>(i)<br>            &#125;<br>        &#125;<br>        <span class="hljs-title function_">showPrimes</span>(<span class="hljs-number">9</span>)<br>        <br><span class="hljs-comment">// 这段更易懂简洁</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">showPrimes</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">isPrime</span>(i))<br>            <span class="hljs-title function_">alert</span>(i)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">isPrime</span>(<span class="hljs-params">n</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">2</span>; i&lt;n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(n%i == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>  - 使用？或 ||重写函数  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//原函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAge</span>(<span class="hljs-params">age</span>) &#123;<br>  <span class="hljs-keyword">if</span> (age &gt; <span class="hljs-number">18</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;Do you have your parents permission to access this page?&#x27;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ?改写</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAge</span>(<span class="hljs-params">age</span>)&#123;<br>    <span class="hljs-keyword">return</span> (age&gt;<span class="hljs-number">18</span>)? <span class="hljs-attr">true</span>: <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;Do you.....&#x27;</span>)<br>&#125;<br><span class="hljs-comment">// ||改写</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkAge</span>(<span class="hljs-params">age</span>)&#123;<br>    <span class="hljs-keyword">return</span> (age&gt;<span class="hljs-number">18</span>) || <span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;Do you....&#x27;</span>)<br>&#125;<br><span class="hljs-comment">//(age&gt;18)的（）可省略</span><br></code></pre></td></tr></table></figure></code></pre><p>   7.<strong>函数表达式</strong> (函数是一种特殊的值)</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//函数声明</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">let</span> sayHi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>)<br>&#125;;<br><span class="hljs-comment">// function 关键字后的函数名可以不写</span><br><br><span class="hljs-comment">//都是在sayHi变量中存储了一个函数</span><br><span class="hljs-comment">//如果alert(sayHi)会显示源码 而不是函数的调用结果，因为函数是一个特殊的值，所以，我们可以把它赋值给另一个变量</span><br><span class="hljs-keyword">let</span> func = sayHi <span class="hljs-comment">//这里复制</span><br><span class="hljs-title function_">func</span>()<span class="hljs-comment">//Hi  这个也可以执行</span><br><span class="hljs-title function_">sayHi</span>()<span class="hljs-comment">//Hi</span><br><span class="hljs-comment">//首先声明创建了函数，并把它存在了变量sayHi中， 把sayHi函数本身赋值给变量func,所以func()也能正常执行 （用表达式创建函数sayHi也是同理）</span><br></code></pre></td></tr></table></figure><p>8.回调函数</p><p>   核心: 传递一个函数，在稍后需要用到的时候再’回调’</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">question, yes, no</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(question)) <span class="hljs-title function_">yes</span>()<br>            <span class="hljs-keyword">else</span> <span class="hljs-title function_">no</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">showOk</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You agreed&#x27;</span>)<br>        &#125;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">showCancel</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You canceled&#x27;</span>)<br>        &#125;<br><br>        <span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;Do you agree?&#x27;</span>, showOk, showCancel)<br><span class="hljs-comment">// 上面的showOk和showCancel被称为回调函数（回调）</span><br><span class="hljs-comment">//改写成用匿名函数（没有名字的函数）在ask()函数内进行函数声明： </span><br> <span class="hljs-keyword">function</span> <span class="hljs-title function_">ask</span>(<span class="hljs-params">question, yes, no</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_">confirm</span>(question)) <span class="hljs-title function_">yes</span>()<br>            <span class="hljs-keyword">else</span> <span class="hljs-title function_">no</span>();<br>        &#125;<br><span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;Do you agree&#x27;</span>, <br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You agreed&#x27;</span>)&#125;, <br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You canceled&#x27;</span>)&#125;);<br><span class="hljs-comment">//这两个函数在ask外是无法访问的（因为没有对它们分配变量）</span><br></code></pre></td></tr></table></figure><p><strong>差别</strong>:</p><p>函数声明和函数表达式的差别体现在：函数表达式只有在代码执行到该处的时候才会被创建，仅从这一个开始才能用；但在函数声明被定义前，它就可以被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&quot;John&quot;</span>); <span class="hljs-comment">// Hello, John</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHi</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-title function_">alert</span>( <span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>`</span> );<br>&#125;<br><span class="hljs-comment">// JS脚本准备运行时，首先会在脚本里寻找全局的函数声明，并且创建这些函数；在处理完所有的函数声明之后，代码才会被执行。所以上面的sayHi是在准备运行脚本阶段创建的， 脚本的任何位置都可见</span><br><br><span class="hljs-comment">// 函数表达式则不可</span><br><span class="hljs-title function_">sayHi</span>(<span class="hljs-string">&#x27;John&#x27;</span>)<span class="hljs-comment">//error</span><br><span class="hljs-keyword">let</span> sayHi = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title function_">alert</span>( <span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>`</span> );<br>&#125;<br></code></pre></td></tr></table></figure><p>严格模式下：如果一个函数声明是在一个代码块内，那么它在代码块内的任何位置都是可访问的，但是在代码块外部是不可访问的，比如以下代码:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;What is your age?&quot;</span>, <span class="hljs-number">18</span>);<br><br><span class="hljs-comment">// 有条件地声明一个函数</span><br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) &#123;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>  &#125;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Greetings!&quot;</span>);<br>  &#125;<br><br>&#125;<br><br><span class="hljs-comment">// ……稍后使用</span><br><span class="hljs-title function_">welcome</span>(); <span class="hljs-comment">// Error: welcome is not defined</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">16</span>; <span class="hljs-comment">// 拿 16 作为例子</span><br><br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) &#123;<br>  <span class="hljs-title function_">welcome</span>();               <span class="hljs-comment">// \   (运行)</span><br>                           <span class="hljs-comment">//  |</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;     <span class="hljs-comment">//  |</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);       <span class="hljs-comment">//  |  函数声明在声明它的代码块内任意位置都可用</span><br>  &#125;                        <span class="hljs-comment">//  |</span><br>                           <span class="hljs-comment">//  |</span><br>  <span class="hljs-title function_">welcome</span>();               <span class="hljs-comment">// /   (运行)</span><br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">welcome</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Greetings!&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 在这里，我们在花括号外部调用函数，我们看不到它们内部的函数声明。</span><br><br><br><span class="hljs-title function_">welcome</span>(); <span class="hljs-comment">// Error: welcome is not defined</span><br></code></pre></td></tr></table></figure><p>解决方案：用函数表达式，声明成全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;What is your age?&quot;</span>, <span class="hljs-number">18</span>);<br><br><span class="hljs-keyword">let</span> welcome;<br><br><span class="hljs-keyword">if</span> (age &lt; <span class="hljs-number">18</span>) &#123;<br><br>  welcome = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>);<br>  &#125;;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>  welcome = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Greetings!&quot;</span>);<br>  &#125;;<br><br>&#125;<br><br><span class="hljs-title function_">welcome</span>(); <span class="hljs-comment">// 现在可以了</span><br><br><span class="hljs-comment">//简洁写法</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;what&#x27;s your age&quot;</span>)<br>        <span class="hljs-keyword">let</span> welcome = (age &lt;<span class="hljs-number">18</span>) ?<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Hello!&quot;</span>); &#125;:<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;Greetings!&quot;</span>);&#125;<br></code></pre></td></tr></table></figure><p>总结：在大多数情况下，当我们需要声明一个函数时，最好使用函数声明，因为函数在被声明之前也是可见的。这使我们在代码组织方面更具灵活性，通常也会使得代码可读性更高。所以，仅当函数声明不适合对应的任务时，才应使用函数表达式。（偷懒，直接摘抄的）</p><p>9.箭头函数（基础）</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">a, b</span>) =&gt; &#123;<br>            <span class="hljs-keyword">let</span> result = a + b;<br>            <span class="hljs-keyword">return</span> result; <span class="hljs-comment">//如果使用了花括号，则一定要用return</span><br>        &#125;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-title function_">sum</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>))<br><br>        <span class="hljs-keyword">let</span> age = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;What&#x27;s your age&quot;</span>)<br>        <span class="hljs-keyword">let</span> welcome = (age &lt; <span class="hljs-number">18</span>) ?<br>            <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hi&#x27;</span>) :<br>            <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Greetings&#x27;</span>) <span class="hljs-comment">//无参  保留括号  只有一个参数 省略括号</span><br><br>        <span class="hljs-title function_">welcome</span>();<br><br><span class="hljs-comment">//改写代码</span><br> <span class="hljs-keyword">let</span> <span class="hljs-title function_">ask</span> = (<span class="hljs-params">question, yes, no</span>) =&gt; <span class="hljs-title function_">confirm</span>(question) ? <span class="hljs-title function_">yes</span>() : <span class="hljs-title function_">no</span>()<br>        <span class="hljs-title function_">ask</span>(<span class="hljs-string">&#x27;Do you agree?&#x27;</span>, <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;agree&#x27;</span>), <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;cancel&#x27;</span>))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS现代教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS现代教程- 循环和遍历</title>
    <link href="/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%BE%AA%E7%8E%AF%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <url>/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%BE%AA%E7%8E%AF%E5%92%8C%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1-循环"><a href="#1-循环" class="headerlink" title="(1) 循环"></a>(1) 循环</h4><h5 id="1-1-for-循环"><a href="#1-1-for-循环" class="headerlink" title="1.1 for 循环"></a>1.1 for 循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for (;;) —— 每次迭代之前都要检查条件，可以使用其他设置。</span><br> <span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (list[i] === <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//中止整个循环</span><br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i]); <span class="hljs-comment">//1, 2, 3, 4</span><br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-while循环"><a href="#1-2-while循环" class="headerlink" title="1.2 while循环"></a>1.2 while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//每次迭代之前都要检查条件 为true则一直执行</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>  num++<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-do…while循环"><a href="#1-3-do…while循环" class="headerlink" title="1.3 do…while循环"></a>1.3 do…while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//每次迭代后都要检查条件 该循环至少会执行一次，即使条件为false</span><br> <span class="hljs-keyword">let</span> i = <span class="hljs-number">6</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//6</span><br>            i--<br>        &#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure><h5 id="1-4-跳出循环continue和break"><a href="#1-4-跳出循环continue和break" class="headerlink" title="1.4 跳出循环continue和break"></a>1.4 跳出循环continue和break</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//continue跳出当前循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i === <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 0 1 2 4 </span><br>        &#125;<br><br><span class="hljs-comment">//break 跳出整个循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i === <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 0, 1</span><br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="2-遍历"><a href="#2-遍历" class="headerlink" title="(2) 遍历"></a>(2) 遍历</h4><h5 id="2-1-数组遍历"><a href="#2-1-数组遍历" class="headerlink" title="2.1 数组遍历"></a>2.1 数组遍历</h5><h6 id="2-1-1-for"><a href="#2-1-1-for" class="headerlink" title="2.1.1 for"></a>2.1.1 for</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (list[i] === <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//中止整个循环</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i]); <span class="hljs-comment">//1, 2, 3, 4</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-1-2-forEach-和-for…of"><a href="#2-1-2-forEach-和-for…of" class="headerlink" title="2.1.2 forEach 和 for…of"></a>2.1.2 forEach 和 for…of</h6><p>注意：会直接在原数组上进行变动，和map()不同的是，不会生成新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for...of </span><br><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> list) &#123;<br>            <span class="hljs-keyword">if</span> (item === <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<span class="hljs-comment">//1, 2, 3, 4</span><br>        &#125;<br><span class="hljs-comment">// 可以使用break 或者continue跳过或终止循环</span><br><span class="hljs-comment">//for...of 访问的是实际的元素， for访问的是索引</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// forEach   无法跳出循环 要加上return</span><br><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (item === <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// console.log(index);// 0,1,2,3,5,6</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 1,2,3,4,6,7</span><br>        &#125;)<br><span class="hljs-comment">//按升序为数组中含有效值的每一项执行一次给定的函数</span><br></code></pre></td></tr></table></figure><h6 id="2-1-3-find-和-findIndex"><a href="#2-1-3-find-和-findIndex" class="headerlink" title="2.1.3 find 和 findIndex"></a>2.1.3 find 和 findIndex</h6><p>find方法返回数组中满足提供的函数的第一个元素的值，否则返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> list = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;下&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]<br> <span class="hljs-keyword">const</span> result = list.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> index.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>result.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;新的&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// &#123;name:&#x27;新的&#x27;， id:3&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<span class="hljs-comment">//同理</span><br></code></pre></td></tr></table></figure><p>findIndex返回的是符合条件的第一个元素的索引值，而不是值本身, 如果不存在符合条件的则返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;下&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]<br><span class="hljs-keyword">const</span> index = list.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index); <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[index].<span class="hljs-property">name</span>); <span class="hljs-comment">// 下</span><br><br></code></pre></td></tr></table></figure><h6 id="2-1-4-map-和-filter"><a href="#2-1-4-map-和-filter" class="headerlink" title="2.1.4 map 和 filter"></a>2.1.4 map 和 filter</h6><p>map()和filter()都会跳过空元素， map 生成的新数组元素是可自定义 ，但filter生成的不可。</p><p>map()返回一个新数组，新数组由旧数组中的每一个元素都调用一次函数后的返回值组成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span><br>&#125;)<br><br><span class="hljs-comment">// 也可以更简写</span><br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr); <span class="hljs-comment">//[4, 8, 18, 8, 0]</span><br></code></pre></td></tr></table></figure><p>map()重新格式化数组中的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [&#123; <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">10</span> &#125;,<br>           &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">20</span> &#125;,<br>           &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">30</span> &#125;];<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">let</span> rObj = &#123;&#125;<br>    rObj[obj.<span class="hljs-property">key</span>] = obj.<span class="hljs-property">value</span><br>    <span class="hljs-keyword">return</span> rObj<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">//[&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;]</span><br><span class="hljs-comment">//原数组没有改变</span><br></code></pre></td></tr></table></figure><p>filter()， 返回一个新数组，新数组包含符合提供的函数条件的所有元素 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br><span class="hljs-keyword">return</span> item - <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">// [4,5]</span><br></code></pre></td></tr></table></figure><h6 id="2-1-5-some-和-every"><a href="#2-1-5-some-和-every" class="headerlink" title="2.1.5 some  和 every"></a>2.1.5 some  和 every</h6><p>some和every返回值是Boolean型</p><p>some()方法测试数组中是不是至少有一个元素是满足提供的函数的条件的，如果有则返回true(同时循环中断)否则返回false(如果提供的是空数组，返回的是false)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>            <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">5</span><br>        &#125;<br><br>        <span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>]<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">some</span>(test)); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 用箭头函数书写</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &gt; <span class="hljs-number">11</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>every()方法和some()相反; every是所有的元素都符合条件才会返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">element, index, array</span>) &#123;<br><span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">70</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">every</span>(test1));<span class="hljs-comment">//false</span><br><span class="hljs-comment">//箭头函数写法</span><br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>        <span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &gt; <span class="hljs-number">10</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="2-2-对象遍历"><a href="#2-2-对象遍历" class="headerlink" title="2.2 对象遍历"></a>2.2 对象遍历</h5><h6 id="2-2-1-for…in"><a href="#2-2-1-for…in" class="headerlink" title="2.2.1 for…in"></a>2.2.1 for…in</h6><p>遍历一个对象的所有的key(键)，可以使用for…in{} (对象中每个key执行的代码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>            <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> user) &#123;<br>            <span class="hljs-comment">// 键</span><br>            <span class="hljs-title function_">alert</span>(k) <span class="hljs-comment">// name  age isAdmin</span><br>            <span class="hljs-comment">// 键值</span><br>            <span class="hljs-title function_">alert</span>(user[k]) <span class="hljs-comment">// John 30 true</span><br>        &#125;<br><span class="hljs-comment">//访问属性的方法</span><br><span class="hljs-comment">//点符号: obj.property。</span><br><span class="hljs-comment">//方括号 obj[&quot;property&quot;]，方括号允许从变量中获取键，例如 obj[varWithKey]。</span><br><br><span class="hljs-comment">//使用 for in 循环时，返回的是所有能够通过对象访问的、可枚举的属性，既包括存在于实例中的属性，也包括存在于原型中的实例。如果只需要获取对象的实例属性，可以使用 hasOwnProperty 进行过滤。</span><br> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fun</span> = <span class="hljs-function">() =&gt;</span> &#123; &#125;;<br>        <span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>, obj[i]);<br>        &#125;<span class="hljs-comment">// 1: b// 2: a// fun : () =&gt; &#123;&#125; Object 原型链上扩展的方法也被遍历出来</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(obj, i)) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>, obj[i]);<br>            &#125;<br>        &#125;<span class="hljs-comment">// name : a 不属于自身的属性将被 hasOwnProperty 过滤</span><br></code></pre></td></tr></table></figure><h6 id="2-2-2-Object-keys"><a href="#2-2-2-Object-keys" class="headerlink" title="2.2.2 Object.keys()"></a>2.2.2 Object.keys()</h6><p>Object.keys()遍历对象，返回一个数组，其元素包括对象自身的所有可枚举的属性（不含Symbol属性)的键名，不会返回原型上的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fun</span> = <span class="hljs-function">() =&gt;</span> &#123; &#125;;<br>       <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ab&#x27;</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(str));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br>       <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br>       <span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br></code></pre></td></tr></table></figure><h6 id="2-2-3-Object-values"><a href="#2-2-3-Object-values" class="headerlink" title="2.2.3 Object.values()"></a>2.2.3 Object.values()</h6><p>对象遍历，返回一个由目标对象value组成的数组其元素是在目标对象上找到的可枚举属性值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj))<br><span class="hljs-comment">// 输出 [&quot;张三&quot;, 18, &quot;男&quot;]</span><br></code></pre></td></tr></table></figure><h6 id="2-2-4-Object-entries"><a href="#2-2-4-Object-entries" class="headerlink" title="2.2.4 Object.entries()"></a>2.2.4 Object.entries()</h6><p> 方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br><span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;somestring&#x27;</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-number">42</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj1)) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>); <span class="hljs-comment">//a: somestring b: 42</span><br>&#125;<br><br><span class="hljs-keyword">const</span> anObj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(anObj)); <span class="hljs-comment">// [ [&#x27;2&#x27;, &#x27;b&#x27;], [&#x27;7&#x27;, &#x27;c&#x27;], [&#x27;100&#x27;, &#x27;a&#x27;] ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS现代教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS现代教程-基础</title>
    <link href="/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>重新系统地过一遍JS现代教程，这部分主要是<strong>基础知识</strong></p><h3 id="（1）自增自减"><a href="#（1）自增自减" class="headerlink" title="（1）自增自减"></a>（1）自增自减</h3><ol><li>区分先赋值还是先进行自增或自减后再参与赋值运算即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//情况1：</span><br>a = ++counter;<br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 1  counter=1</span><br><br><span class="hljs-comment">// 情况2 </span><br>a = counter++;<br><span class="hljs-title function_">alert</span>(a)<span class="hljs-comment">//0 counter = 1</span><br><br><br></code></pre></td></tr></table></figure><h3 id="（2）值的比较"><a href="#（2）值的比较" class="headerlink" title="（2）值的比较"></a>（2）值的比较</h3><ol><li><p>比较运算符永远返回布尔值</p></li><li><p>字符串比较大小是根据字符在Unicode中的字符索引值来比较的 比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;A&#x27;</span> &lt;<span class="hljs-string">&#x27;Z&#x27;</span>;  <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;a&#x27;</span>&gt;<span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-comment">//true</span><br><span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure></li><li><p><strong>不同类型的值</strong>进行大小比较时， 首先会转化成数字型 再进行比较（普通相等）</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">//true  2先转成数字型2</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;02&#x27;</span>==<span class="hljs-number">2</span>)<span class="hljs-comment">//true </span><br><span class="hljs-comment">//布尔类型 true == 1  false == 0</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-literal">true</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; <span class="hljs-comment">//注意这里是字符型</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Boolean</span>(a) ); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;0&quot;</span>; <span class="hljs-comment">//注意这里是字符串</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Boolean</span>(b) ); <span class="hljs-comment">// true</span><br><br><span class="hljs-title function_">alert</span>(a == b); <span class="hljs-comment">// true!</span><br></code></pre></td></tr></table></figure><ol start="4"><li>要区分非严格相等和严格相等的情况。非严格相等的情况下 undefined==null ; null &gt;=0 结果为true（其他情况是false）， 因为null被转化为0； undefined被转化为NaN， 它和任何值比较返回的都是false。</li><li>注意布尔值的转换：“ ‘’, 0, null, undefined, NaN 都会转换成false； 其他的转为true</li></ol><h3 id="（4）if-语句"><a href="#（4）if-语句" class="headerlink" title="（4）if 语句"></a>（4）if 语句</h3><p>注意下面这段代码 {}里的代码块会执行。注意区分’0’ 和 ‘’和0是不同的 ‘0’的逻辑值是true, 0和’’的逻辑值是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（5）逻辑运算"><a href="#（5）逻辑运算" class="headerlink" title="（5）逻辑运算"></a>（5）逻辑运算</h3><ol><li>要注意下面这种 <strong>获取变量列表或者表达式中的第一个真值</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> firstName = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">let</span> lastName = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">let</span> nickName = <span class="hljs-string">&#x27;superCoder&#x27;</span><br><span class="hljs-title function_">alert</span>(firstName || lastName || nickName || <span class="hljs-string">&#x27;Anonymous&#x27;</span>) <span class="hljs-comment">//superCoder</span><br><span class="hljs-comment">//如果所有的变量都是假值 那最后返回的是Anonymous</span><br></code></pre></td></tr></table></figure><p>2.<strong>或与运算符的短路求值</strong></p><p>   <strong>短路求值</strong>的意思是||对其参数进行处理，知道运行到到第一个真值，立即返回该值，不再处理后面的参数。</p><ul><li>这条是不会打印的，因为或与运算符||遇到true之后就停止执行 代码不会运行到alert(‘Hello’)</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span> || <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>这条会打印</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">false</span> || <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>或运算寻找第一个真值</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> || <span class="hljs-number">0</span> ); <span class="hljs-comment">// 1（1 是真值）</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> || <span class="hljs-number">1</span> ); <span class="hljs-comment">// 1（1 是第一个真值）</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> || <span class="hljs-number">0</span> || <span class="hljs-number">1</span> ); <span class="hljs-comment">// 1（第一个真值）</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">undefined</span> || <span class="hljs-literal">null</span> || <span class="hljs-number">0</span> ); <span class="hljs-comment">// 0（都是假值，返回最后一个值）</span><br></code></pre></td></tr></table></figure><p>3.与运算寻找第一个假值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如果第一个操作数是真值，</span><br><span class="hljs-comment">// 与运算返回第二个操作数：</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">0</span> ); <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">5</span> ); <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 如果第一个操作数是假值，</span><br><span class="hljs-comment">// 与运算将直接返回它。第二个操作数会被忽略</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">5</span> ); <span class="hljs-comment">// null</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;no matter what&quot;</span> ); <span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 返回第一个假值</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">3</span> ); <span class="hljs-comment">// null</span><br><span class="hljs-comment">//如果都是真值，则返回最后一个</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">3</span> ); <span class="hljs-comment">// 3，最后一个值</span><br></code></pre></td></tr></table></figure><p>注意：&amp;&amp; 的优先级比||高</p><p>prompt运行过程中按下‘ESC’键，获得的是null； 输入空字符串得到的是’ ‘</p><h3 id="（6）空值合并运算符"><a href="#（6）空值合并运算符" class="headerlink" title="（6）空值合并运算符??"></a>（6）空值合并运算符??</h3><ol><li>？？可以选出第一个undefined/null的值， 一般用来为变量分配默认值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">height = height ?? <span class="hljs-number">100</span> <span class="hljs-comment">// 当height的值为undefined或null时，将height的值设定为100</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">result = a??b<br><span class="hljs-comment">//重写</span><br>result= <span class="hljs-keyword">if</span>(a !== <span class="hljs-literal">undefined</span> &amp;&amp; a !== <span class="hljs-literal">null</span>)?? <span class="hljs-attr">a</span>:b<br><span class="hljs-comment">//只要第一个参数不是null/undefined， ？？返回第一个参数，否则返回第二个参数</span><br><span class="hljs-comment">//比如下面这个例子：</span><br><span class="hljs-keyword">let</span> user<br><span class="hljs-title function_">alert</span>(user ?? <span class="hljs-string">&#x27;匿名&#x27;</span>)<span class="hljs-comment">// 返回的是匿名  因为user未定义</span><br><span class="hljs-comment">// 下面这个例子返回的是user</span><br><span class="hljs-keyword">let</span> user = <span class="hljs-string">&#x27;Jhon&#x27;</span><br><span class="hljs-title function_">alert</span>(user ?? <span class="hljs-string">&#x27;匿名&#x27;</span>) <span class="hljs-comment">//返回的是Jhon,因为user已定义</span><br></code></pre></td></tr></table></figure><p> 2.以下代码使用??和|| 效果是一样的</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> firstName = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> lastName = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> nickName = <span class="hljs-string">&quot;Supercoder&quot;</span>;<br><span class="hljs-title function_">alert</span>(firstName||lastName||nickName||<span class="hljs-string">&#x27;super&#x27;</span>)<span class="hljs-comment">// Supercoder</span><br></code></pre></td></tr></table></figure><ul><li>但是|| 和??是由区别的：||是选出第一个<strong>真值</strong>，而?? 是选出第一个<strong>不是undefined/null</strong>的值</li><li>||和？？的优先级一样 但是不能同时使用，要用（）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS现代教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-Type Ahead</title>
    <link href="/2022/08/26/-Ahead/"/>
    <url>/2022/08/26/-Ahead/</url>
    
    <content type="html"><![CDATA[<p>实现功能：给出关键字，在搜索框呈现符合条件的选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br>        <span class="hljs-keyword">const</span> cities = [];<br>        <span class="hljs-title function_">fetch</span>(endpoint)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">blob</span> =&gt;</span> blob.<span class="hljs-title function_">json</span>())<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities.<span class="hljs-title function_">push</span>(...data));<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">findMathches</span>(<span class="hljs-params">wordToMatch, cities</span>) &#123;<br>            <span class="hljs-keyword">return</span> cities.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">// here we need to figure out if the city or state matches what was searched</span><br>                <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(wordToMatch, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                <span class="hljs-keyword">return</span> place.<span class="hljs-property">city</span>.<span class="hljs-title function_">match</span>(regex) || place.<span class="hljs-property">state</span>.<span class="hljs-title function_">match</span>(regex)<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-params">x</span>) &#123;<br>            <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayMatches</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> matchArray = <span class="hljs-title function_">findMatches</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, cities);<br>            <span class="hljs-keyword">const</span> html = matchArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                <span class="hljs-keyword">const</span> cityName = place.<span class="hljs-property">city</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                <span class="hljs-keyword">const</span> stateName = place.<span class="hljs-property">state</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &lt;span class=&quot;name&quot;&gt;<span class="hljs-subst">$&#123;cityName&#125;</span>, <span class="hljs-subst">$&#123;stateName&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">        &lt;span class=&quot;population&quot;&gt;<span class="hljs-subst">$&#123;numberWithCommas(place.population)&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    `</span>;<br>            &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            suggestions.<span class="hljs-property">innerHTML</span> = html;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> searchInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.search&#x27;</span>);<br>        <span class="hljs-keyword">const</span> suggestions = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.suggestions&#x27;</span>);<br><br>        searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, displayMatches);<br>        searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, displayMatches);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><ol><li><p>如何获取资料？ 除axios之外，主要有两种方法：fetch和XTMLHttp </p><ul><li>fetch:  从 <code>fetch()</code> 返回的 Promise <strong>不会被标记为 reject</strong> ;  <code>fetch</code> <strong>不会发送跨域 cookie</strong>，除非你使用了 <em>credentials</em> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch#%E5%8F%82%E6%95%B0">初始化选项</a>。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// fetch请求设置</span><br><span class="hljs-title function_">fetch</span>(endpoint)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error))<br><br></code></pre></td></tr></table></figure><ul><li>fetch 获取信息有两种方式:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 直接赋值 </span><br><span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br><span class="hljs-keyword">let</span> cities = <span class="hljs-literal">null</span><br><span class="hljs-title function_">fetch</span>(endpoint)<br><span class="hljs-comment">//将获取到的数据解析(json())</span><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities = data)<br><span class="hljs-comment">//成功获取数据</span><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">cities</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cities))<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//2. 解构赋值   设置空数组，利用解构一个一个放进数组</span><br><span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br><span class="hljs-keyword">const</span> cities = []<br><span class="hljs-title function_">fetch</span>(endpoint)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities.<span class="hljs-title function_">push</span>(...data))<br></code></pre></td></tr></table></figure></li><li><p>获取完数据之后，建立function findMatches(wordToMatch, cities)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> find<span class="hljs-constructor">Matches(<span class="hljs-params">wordToMatch</span>, <span class="hljs-params">cities</span>)</span>&#123;<br>return cities.filter(place =&gt; &#123;<br>const regex = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RegExp(<span class="hljs-params">wordToMatch</span>, &#x27;<span class="hljs-params">gi</span>&#x27;)</span><br>return place.city.<span class="hljs-keyword">match</span>(regex)<span class="hljs-operator"> || </span>place.state.<span class="hljs-keyword">match</span>(regex)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立displayMatches()，并监听输入框的change和keyup。每一次输入都会触发。将对比的结果用map来return li</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-params">x</span>) &#123;<br>              <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>          &#125;<br>  <br>          <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayMatches</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-keyword">const</span> matchArray = <span class="hljs-title function_">findMatches</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, cities);<br>              <span class="hljs-keyword">const</span> html = matchArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                  <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                  <span class="hljs-keyword">const</span> cityName = place.<span class="hljs-property">city</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                  <span class="hljs-keyword">const</span> stateName = place.<span class="hljs-property">state</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;li&gt;</span><br><span class="hljs-string">          &lt;span class=&quot;name&quot;&gt;<span class="hljs-subst">$&#123;cityName&#125;</span>, <span class="hljs-subst">$&#123;stateName&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">          &lt;span class=&quot;population&quot;&gt;<span class="hljs-subst">$&#123;numberWithCommas(place.population)&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">      `</span>;<br>              &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>              suggestions.<span class="hljs-property">innerHTML</span> = html;<br>          &#125;<br>  <br>          <span class="hljs-keyword">const</span> searchInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.search&#x27;</span>);<br>          <span class="hljs-keyword">const</span> suggestions = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.suggestions&#x27;</span>);<br>  <br>          searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, displayMatches);<br>          searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, displayMatches); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript 30 days</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-Flex Panel Gallery</title>
    <link href="/2022/08/26/x-Panel-Gallery/"/>
    <url>/2022/08/26/x-Panel-Gallery/</url>
    
    <content type="html"><![CDATA[<p><strong>1. 重点：利用DOM操作CSS</strong></p><p>前:</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>后:<br><img src="/images/pasted-3.png" alt="upload successful"></p><p>单图‘点击’后的效果<br><img src="/images/pasted-4.png" alt="upload successful"></p><p><strong>2. 核心思路</strong></p><ul><li><p>HTML： 整体由一个大的panels包含5个小的panel组成</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">panels</span>&quot;&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel1</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Hey</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Let</span>&#x27;<span class="hljs-symbol">s</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Dance</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel2</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Give</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Take</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Receive</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel3</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Experience</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">It</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Today</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel4</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Give</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">All</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">You</span> <span class="hljs-symbol">can</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel5</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Life</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">In</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Motion</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br> &lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>CSS：</p><p>   1.使用flex布局，设置flex-direction为column</p><p> 2.给first-child及last-child做位移效果，同时设置open-active，利用DOM操作CSS效果</p><p> 3.使用classList.toggle新增/移除动画class</p><p> 4.click&amp;transitionend事件触发toggle函数</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;helvetica neue&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        *,</span><br><span class="language-css">        *<span class="hljs-selector-pseudo">::before</span>,</span><br><span class="language-css">        *<span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: inherit;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panels</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6b0f9c</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>:</span><br><span class="language-css">                font-size <span class="hljs-number">0.7s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.61</span>, -<span class="hljs-number">0.19</span>, <span class="hljs-number">0.7</span>, -<span class="hljs-number">0.11</span>),</span><br><span class="language-css">                flex <span class="hljs-number">0.7s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.61</span>, -<span class="hljs-number">0.19</span>, <span class="hljs-number">0.7</span>, -<span class="hljs-number">0.11</span>),</span><br><span class="language-css">                background <span class="hljs-number">0.2s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/gYl-UtwNg_I/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/rFKUFzjPYiQ/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel3</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://images.unsplash.com/photo-1465188162913-8fb5709d6d57?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;w=1500&amp;h=1500&amp;fit=crop&amp;s=967e8a713a4e395260793fc8c802901d</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel4</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/ITjiVXcwVng/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel5</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/3MNzGlQM7qs/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;* &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.5s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;*<span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open-active</span>&gt;*<span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;*<span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">100%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open-active</span>&gt;*<span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Amatic SC&#x27;</span>, cursive;</span><br><span class="language-css">            <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.72</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">14px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.45</span>);</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">5</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>) &#123;</span><br><span class="language-css">            <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">font-style</span>: <span class="hljs-number">1em</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>JS</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> panels = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.panel&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleOpen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;open&#x27;</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleActive</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">propertyName</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (e.<span class="hljs-property">propertyName</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;flex&#x27;</span>)) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;open-active&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      panels.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">panel</span> =&gt;</span> panel.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, toggleOpen))</span><br><span class="language-javascript">      panels.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">panel</span> =&gt;</span> panel.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;transitionend&#x27;</span>, toggleActive))</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript 30 days</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
