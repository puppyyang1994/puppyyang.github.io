<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS现代教程- 循环和遍历</title>
    <link href="/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%BE%AA%E7%8E%AF%E5%92%8C%E9%81%8D%E5%8E%86/"/>
    <url>/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%BE%AA%E7%8E%AF%E5%92%8C%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1-循环"><a href="#1-循环" class="headerlink" title="(1) 循环"></a>(1) 循环</h4><h5 id="1-1-for-循环"><a href="#1-1-for-循环" class="headerlink" title="1.1 for 循环"></a>1.1 for 循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for (;;) —— 每次迭代之前都要检查条件，可以使用其他设置。</span><br> <span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (list[i] === <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//中止整个循环</span><br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i]); <span class="hljs-comment">//1, 2, 3, 4</span><br>        &#125;<br></code></pre></td></tr></table></figure><h5 id="1-2-while循环"><a href="#1-2-while循环" class="headerlink" title="1.2 while循环"></a>1.2 while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//每次迭代之前都要检查条件 为true则一直执行</span><br><span class="hljs-keyword">let</span> num = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (num &lt; <span class="hljs-number">10</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>  num++<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="1-3-do…while循环"><a href="#1-3-do…while循环" class="headerlink" title="1.3 do…while循环"></a>1.3 do…while循环</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//每次迭代后都要检查条件 该循环至少会执行一次，即使条件为false</span><br> <span class="hljs-keyword">let</span> i = <span class="hljs-number">6</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//6</span><br>            i--<br>        &#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>)<br><br></code></pre></td></tr></table></figure><h5 id="1-4-跳出循环continue和break"><a href="#1-4-跳出循环continue和break" class="headerlink" title="1.4 跳出循环continue和break"></a>1.4 跳出循环continue和break</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//continue跳出当前循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i === <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">continue</span><br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 0 1 2 4 </span><br>        &#125;<br><br><span class="hljs-comment">//break 跳出整个循环</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i === <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 0, 1</span><br>        &#125;<br></code></pre></td></tr></table></figure><h4 id="2-遍历"><a href="#2-遍历" class="headerlink" title="(2) 遍历"></a>(2) 遍历</h4><h5 id="2-1-数组遍历"><a href="#2-1-数组遍历" class="headerlink" title="2.1 数组遍历"></a>2.1 数组遍历</h5><h6 id="2-1-1-for"><a href="#2-1-1-for" class="headerlink" title="2.1.1 for"></a>2.1.1 for</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (list[i] === <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">//中止整个循环</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[i]); <span class="hljs-comment">//1, 2, 3, 4</span><br>&#125;<br></code></pre></td></tr></table></figure><h6 id="2-1-2-forEach-和-for…of"><a href="#2-1-2-forEach-和-for…of" class="headerlink" title="2.1.2 forEach 和 for…of"></a>2.1.2 forEach 和 for…of</h6><p>注意：会直接在原数组上进行变动，和map()不同的是，不会生成新的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//for...of </span><br><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">of</span> list) &#123;<br>            <span class="hljs-keyword">if</span> (item === <span class="hljs-number">5</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<span class="hljs-comment">//1, 2, 3, 4</span><br>        &#125;<br><span class="hljs-comment">// 可以使用break 或者continue跳过或终止循环</span><br><span class="hljs-comment">//for...of 访问的是实际的元素， for访问的是索引</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// forEach   无法跳出循环 要加上return</span><br><span class="hljs-keyword">const</span> list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]<br>        list.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, index, arr</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (item === <span class="hljs-number">5</span>) <span class="hljs-keyword">return</span>;<br><br>            <span class="hljs-comment">// console.log(index);// 0,1,2,3,5,6</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item); <span class="hljs-comment">// 1,2,3,4,6,7</span><br>        &#125;)<br><span class="hljs-comment">//按升序为数组中含有效值的每一项执行一次给定的函数</span><br></code></pre></td></tr></table></figure><h6 id="2-1-3-find-和-findIndex"><a href="#2-1-3-find-和-findIndex" class="headerlink" title="2.1.3 find 和 findIndex"></a>2.1.3 find 和 findIndex</h6><p>find方法返回数组中满足提供的函数的第一个元素的值，否则返回undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">const</span> list = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;下&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]<br> <span class="hljs-keyword">const</span> result = list.<span class="hljs-title function_">find</span>(<span class="hljs-function">(<span class="hljs-params">index</span>) =&gt;</span> index.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)<br> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br>result.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;新的&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result); <span class="hljs-comment">// &#123;name:&#x27;新的&#x27;， id:3&#125;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list);<span class="hljs-comment">//同理</span><br></code></pre></td></tr></table></figure><p>findIndex返回的是符合条件的第一个元素的索引值，而不是值本身, 如果不存在符合条件的则返回-1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> list = [&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;上&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;中&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;, &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;下&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;]<br><span class="hljs-keyword">const</span> index = list.<span class="hljs-title function_">findIndex</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> item.<span class="hljs-property">id</span> === <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(index); <span class="hljs-comment">//2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(list[index].<span class="hljs-property">name</span>); <span class="hljs-comment">// 下</span><br><br></code></pre></td></tr></table></figure><h6 id="2-1-4-map-和-filter"><a href="#2-1-4-map-和-filter" class="headerlink" title="2.1.4 map 和 filter"></a>2.1.4 map 和 filter</h6><p>map()和filter()都会跳过空元素， map 生成的新数组元素是可自定义 ，但filter生成的不可。</p><p>map()返回一个新数组，新数组由旧数组中的每一个元素都调用一次函数后的返回值组成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> item * <span class="hljs-number">2</span><br>&#125;)<br><br><span class="hljs-comment">// 也可以更简写</span><br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item * <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr); <span class="hljs-comment">//[4, 8, 18, 8, 0]</span><br></code></pre></td></tr></table></figure><p>map()重新格式化数组中的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [&#123; <span class="hljs-attr">key</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">10</span> &#125;,<br>           &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">20</span> &#125;,<br>           &#123; <span class="hljs-attr">key</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">30</span> &#125;];<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">let</span> rObj = &#123;&#125;<br>    rObj[obj.<span class="hljs-property">key</span>] = obj.<span class="hljs-property">value</span><br>    <span class="hljs-keyword">return</span> rObj<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">//[&#123;1: 10&#125;, &#123;2: 20&#125;, &#123;3: 30&#125;]</span><br><span class="hljs-comment">//原数组没有改变</span><br></code></pre></td></tr></table></figure><p>filter()， 返回一个新数组，新数组包含符合提供的函数条件的所有元素 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-keyword">let</span> newArr = arr.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br><span class="hljs-keyword">return</span> item - <span class="hljs-number">2</span> &gt; <span class="hljs-number">1</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<span class="hljs-comment">// [4,5]</span><br></code></pre></td></tr></table></figure><h6 id="2-1-5-some-和-every"><a href="#2-1-5-some-和-every" class="headerlink" title="2.1.5 some  和 every"></a>2.1.5 some  和 every</h6><p>some和every返回值是Boolean型</p><p>some()方法测试数组中是不是至少有一个元素是满足提供的函数的条件的，如果有则返回true(同时循环中断)否则返回false(如果提供的是空数组，返回的是false)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">element, index, array</span>) &#123;<br>            <span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">5</span><br>        &#125;<br><br>        <span class="hljs-keyword">const</span> arr1 = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span>]<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">some</span>(test)); <span class="hljs-comment">// true</span><br>        <span class="hljs-comment">// 用箭头函数书写</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr1.<span class="hljs-title function_">some</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &gt; <span class="hljs-number">11</span>)); <span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>every()方法和some()相反; every是所有的元素都符合条件才会返回true</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">element, index, array</span>) &#123;<br><span class="hljs-keyword">return</span> element &gt; <span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">20</span>, <span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">70</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">every</span>(test1));<span class="hljs-comment">//false</span><br><span class="hljs-comment">//箭头函数写法</span><br>  <span class="hljs-keyword">const</span> arr = [<span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br>        <span class="hljs-keyword">let</span> result = arr.<span class="hljs-title function_">every</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> e &gt; <span class="hljs-number">10</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h5 id="2-2-对象遍历"><a href="#2-2-对象遍历" class="headerlink" title="2.2 对象遍历"></a>2.2 对象遍历</h5><h6 id="2-2-1-for…in"><a href="#2-2-1-for…in" class="headerlink" title="2.2.1 for…in"></a>2.2.1 for…in</h6><p>遍历一个对象的所有的key(键)，可以使用for…in{} (对象中每个key执行的代码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> user = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;John&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>            <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span><br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> user) &#123;<br>            <span class="hljs-comment">// 键</span><br>            <span class="hljs-title function_">alert</span>(k) <span class="hljs-comment">// name  age isAdmin</span><br>            <span class="hljs-comment">// 键值</span><br>            <span class="hljs-title function_">alert</span>(user[k]) <span class="hljs-comment">// John 30 true</span><br>        &#125;<br><span class="hljs-comment">//访问属性的方法</span><br><span class="hljs-comment">//点符号: obj.property。</span><br><span class="hljs-comment">//方括号 obj[&quot;property&quot;]，方括号允许从变量中获取键，例如 obj[varWithKey]。</span><br><br><span class="hljs-comment">//使用 for in 循环时，返回的是所有能够通过对象访问的、可枚举的属性，既包括存在于实例中的属性，也包括存在于原型中的实例。如果只需要获取对象的实例属性，可以使用 hasOwnProperty 进行过滤。</span><br> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fun</span> = <span class="hljs-function">() =&gt;</span> &#123; &#125;;<br>        <span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span> &#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>, obj[i]);<br>        &#125;<span class="hljs-comment">// 1: b// 2: a// fun : () =&gt; &#123;&#125; Object 原型链上扩展的方法也被遍历出来</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">hasOwnProperty</span>.<span class="hljs-title function_">call</span>(obj, i)) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, <span class="hljs-string">&#x27;:&#x27;</span>, obj[i]);<br>            &#125;<br>        &#125;<span class="hljs-comment">// name : a 不属于自身的属性将被 hasOwnProperty 过滤</span><br></code></pre></td></tr></table></figure><h6 id="2-2-2-Object-keys"><a href="#2-2-2-Object-keys" class="headerlink" title="2.2.2 Object.keys()"></a>2.2.2 Object.keys()</h6><p>Object.keys()遍历对象，返回一个数组，其元素包括对象自身的所有可枚举的属性（不含Symbol属性)的键名，不会返回原型上的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fun</span> = <span class="hljs-function">() =&gt;</span> &#123; &#125;;<br>       <span class="hljs-keyword">const</span> str = <span class="hljs-string">&#x27;ab&#x27;</span>;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(str));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br>       <span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>];<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(arr));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br>       <span class="hljs-keyword">const</span> obj = &#123; <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;a&#x27;</span> &#125;;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj));<span class="hljs-comment">// [&#x27;0&#x27;, &#x27;1&#x27;]</span><br></code></pre></td></tr></table></figure><h6 id="2-2-3-Object-values"><a href="#2-2-3-Object-values" class="headerlink" title="2.2.3 Object.values()"></a>2.2.3 Object.values()</h6><p>对象遍历，返回一个由目标对象value组成的数组其元素是在目标对象上找到的可枚举属性值 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj))<br><span class="hljs-comment">// 输出 [&quot;张三&quot;, 18, &quot;男&quot;]</span><br></code></pre></td></tr></table></figure><h6 id="2-2-4-Object-entries"><a href="#2-2-4-Object-entries" class="headerlink" title="2.2.4 Object.entries()"></a>2.2.4 Object.entries()</h6><p> 方法返回一个给定对象自身可枚举属性的键值对数组，其排列与使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...in"><code>for...in</code></a> 循环遍历该对象时返回的顺序一致（区别在于 for-in 循环还会枚举原型链中的属性）。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br><span class="hljs-attr">a</span>: <span class="hljs-string">&#x27;somestring&#x27;</span>,<br><span class="hljs-attr">b</span>: <span class="hljs-number">42</span><br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [key, value] <span class="hljs-keyword">of</span> <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj1)) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;key&#125;</span>: <span class="hljs-subst">$&#123;value&#125;</span>`</span>); <span class="hljs-comment">//a: somestring b: 42</span><br>&#125;<br><br><span class="hljs-keyword">const</span> anObj = &#123; <span class="hljs-number">100</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;c&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(anObj)); <span class="hljs-comment">// [ [&#x27;2&#x27;, &#x27;b&#x27;], [&#x27;7&#x27;, &#x27;c&#x27;], [&#x27;100&#x27;, &#x27;a&#x27;] ]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JS现代教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS现代教程-基础</title>
    <link href="/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/29/JS%E7%8E%B0%E4%BB%A3%E6%95%99%E7%A8%8B-%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>重新系统地过一遍JS现代教程，这部分主要是<strong>基础知识</strong></p><h3 id="（1）自增自减"><a href="#（1）自增自减" class="headerlink" title="（1）自增自减"></a>（1）自增自减</h3><ol><li>区分先赋值还是先进行自增或自减后再参与赋值运算即可</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> counter = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//情况1：</span><br>a = ++counter;<br><span class="hljs-title function_">alert</span>(a) <span class="hljs-comment">// 1  counter=1</span><br><br><span class="hljs-comment">// 情况2 </span><br>a = counter++;<br><span class="hljs-title function_">alert</span>(a)<span class="hljs-comment">//0 counter = 1</span><br><br><br></code></pre></td></tr></table></figure><h3 id="（2）值的比较"><a href="#（2）值的比较" class="headerlink" title="（2）值的比较"></a>（2）值的比较</h3><ol><li><p>比较运算符永远返回布尔值</p></li><li><p>字符串比较大小是根据字符在Unicode中的字符索引值来比较的 比如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;A&#x27;</span> &lt;<span class="hljs-string">&#x27;Z&#x27;</span>;  <span class="hljs-comment">// true</span><br><span class="hljs-string">&#x27;a&#x27;</span>&gt;<span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-comment">//true</span><br><span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-string">&#x27;12&#x27;</span> <span class="hljs-comment">//true </span><br></code></pre></td></tr></table></figure></li><li><p><strong>不同类型的值</strong>进行大小比较时， 首先会转化成数字型 再进行比较（普通相等）</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;2&#x27;</span>&gt;<span class="hljs-number">1</span>)<span class="hljs-comment">//true  2先转成数字型2</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;02&#x27;</span>==<span class="hljs-number">2</span>)<span class="hljs-comment">//true </span><br><span class="hljs-comment">//布尔类型 true == 1  false == 0</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-literal">true</span> == <span class="hljs-number">1</span>) <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; <span class="hljs-comment">//注意这里是字符型</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Boolean</span>(a) ); <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-string">&quot;0&quot;</span>; <span class="hljs-comment">//注意这里是字符串</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-title class_">Boolean</span>(b) ); <span class="hljs-comment">// true</span><br><br><span class="hljs-title function_">alert</span>(a == b); <span class="hljs-comment">// true!</span><br></code></pre></td></tr></table></figure><ol start="4"><li>要区分非严格相等和严格相等的情况。非严格相等的情况下 undefined==null ; null &gt;=0 结果为true（其他情况是false）， 因为null被转化为0； undefined被转化为NaN， 它和任何值比较返回的都是false。</li><li>注意布尔值的转换：“ ‘’, 0, null, undefined, NaN 都会转换成false； 其他的转为true</li></ol><h3 id="（4）if-语句"><a href="#（4）if-语句" class="headerlink" title="（4）if 语句"></a>（4）if 语句</h3><p>注意下面这段代码 {}里的代码块会执行。注意区分’0’ 和 ‘’和0是不同的 ‘0’的逻辑值是true, 0和’’的逻辑值是false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;0&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="（5）逻辑运算"><a href="#（5）逻辑运算" class="headerlink" title="（5）逻辑运算"></a>（5）逻辑运算</h3><ol><li>要注意下面这种 <strong>获取变量列表或者表达式中的第一个真值</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> firstName = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">let</span> lastName = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">let</span> nickName = <span class="hljs-string">&#x27;superCoder&#x27;</span><br><span class="hljs-title function_">alert</span>(firstName || lastName || nickName || <span class="hljs-string">&#x27;Anonymous&#x27;</span>) <span class="hljs-comment">//superCoder</span><br><span class="hljs-comment">//如果所有的变量都是假值 那最后返回的是Anonymous</span><br></code></pre></td></tr></table></figure><p>2.<strong>或与运算符的短路求值</strong></p><p>   <strong>短路求值</strong>的意思是||对其参数进行处理，知道运行到到第一个真值，立即返回该值，不再处理后面的参数。</p><ul><li>这条是不会打印的，因为或与运算符||遇到true之后就停止执行 代码不会运行到alert(‘Hello’)</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">true</span> || <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>这条会打印</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">false</span> || <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br></code></pre></td></tr></table></figure><ul><li>或运算寻找第一个真值</li></ul>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> || <span class="hljs-number">0</span> ); <span class="hljs-comment">// 1（1 是真值）</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> || <span class="hljs-number">1</span> ); <span class="hljs-comment">// 1（1 是第一个真值）</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> || <span class="hljs-number">0</span> || <span class="hljs-number">1</span> ); <span class="hljs-comment">// 1（第一个真值）</span><br><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">undefined</span> || <span class="hljs-literal">null</span> || <span class="hljs-number">0</span> ); <span class="hljs-comment">// 0（都是假值，返回最后一个值）</span><br></code></pre></td></tr></table></figure><p>3.与运算寻找第一个假值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 如果第一个操作数是真值，</span><br><span class="hljs-comment">// 与运算返回第二个操作数：</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">0</span> ); <span class="hljs-comment">// 0</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">5</span> ); <span class="hljs-comment">// 5</span><br><br><span class="hljs-comment">// 如果第一个操作数是假值，</span><br><span class="hljs-comment">// 与运算将直接返回它。第二个操作数会被忽略</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">5</span> ); <span class="hljs-comment">// null</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-string">&quot;no matter what&quot;</span> ); <span class="hljs-comment">// 0</span><br><span class="hljs-comment">// 返回第一个假值</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-number">3</span> ); <span class="hljs-comment">// null</span><br><span class="hljs-comment">//如果都是真值，则返回最后一个</span><br><span class="hljs-title function_">alert</span>( <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">3</span> ); <span class="hljs-comment">// 3，最后一个值</span><br></code></pre></td></tr></table></figure><p>注意：&amp;&amp; 的优先级比||高</p><p>prompt运行过程中按下‘ESC’键，获得的是null； 输入空字符串得到的是’ ‘</p><h3 id="（6）空值合并运算符"><a href="#（6）空值合并运算符" class="headerlink" title="（6）空值合并运算符??"></a>（6）空值合并运算符??</h3><ol><li>？？可以选出第一个undefined/null的值， 一般用来为变量分配默认值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">height = height ?? <span class="hljs-number">100</span> <span class="hljs-comment">// 当height的值为undefined或null时，将height的值设定为100</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">result = a??b<br><span class="hljs-comment">//重写</span><br>result= <span class="hljs-keyword">if</span>(a !== <span class="hljs-literal">undefined</span> &amp;&amp; a !== <span class="hljs-literal">null</span>)?? <span class="hljs-attr">a</span>:b<br><span class="hljs-comment">//只要第一个参数不是null/undefined， ？？返回第一个参数，否则返回第二个参数</span><br><span class="hljs-comment">//比如下面这个例子：</span><br><span class="hljs-keyword">let</span> user<br><span class="hljs-title function_">alert</span>(user ?? <span class="hljs-string">&#x27;匿名&#x27;</span>)<span class="hljs-comment">// 返回的是匿名  因为user未定义</span><br><span class="hljs-comment">// 下面这个例子返回的是user</span><br><span class="hljs-keyword">let</span> user = <span class="hljs-string">&#x27;Jhon&#x27;</span><br><span class="hljs-title function_">alert</span>(user ?? <span class="hljs-string">&#x27;匿名&#x27;</span>) <span class="hljs-comment">//返回的是Jhon,因为user已定义</span><br></code></pre></td></tr></table></figure><p> 2.以下代码使用??和|| 效果是一样的</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> firstName = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> lastName = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">let</span> nickName = <span class="hljs-string">&quot;Supercoder&quot;</span>;<br><span class="hljs-title function_">alert</span>(firstName||lastName||nickName||<span class="hljs-string">&#x27;super&#x27;</span>)<span class="hljs-comment">// Supercoder</span><br></code></pre></td></tr></table></figure><ul><li>但是|| 和??是由区别的：||是选出第一个<strong>真值</strong>，而?? 是选出第一个<strong>不是undefined/null</strong>的值</li><li>||和？？的优先级一样 但是不能同时使用，要用（）</li></ul>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JS现代教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>06-Type Ahead</title>
    <link href="/2022/08/26/-Ahead/"/>
    <url>/2022/08/26/-Ahead/</url>
    
    <content type="html"><![CDATA[<p>实现功能：给出关键字，在搜索框呈现符合条件的选项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>        <span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br>        <span class="hljs-keyword">const</span> cities = [];<br>        <span class="hljs-title function_">fetch</span>(endpoint)<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">blob</span> =&gt;</span> blob.<span class="hljs-title function_">json</span>())<br>            .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities.<span class="hljs-title function_">push</span>(...data));<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">findMathches</span>(<span class="hljs-params">wordToMatch, cities</span>) &#123;<br>            <span class="hljs-keyword">return</span> cities.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                <span class="hljs-comment">// here we need to figure out if the city or state matches what was searched</span><br>                <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(wordToMatch, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                <span class="hljs-keyword">return</span> place.<span class="hljs-property">city</span>.<span class="hljs-title function_">match</span>(regex) || place.<span class="hljs-property">state</span>.<span class="hljs-title function_">match</span>(regex)<br>            &#125;);<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-params">x</span>) &#123;<br>            <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayMatches</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> matchArray = <span class="hljs-title function_">findMatches</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, cities);<br>            <span class="hljs-keyword">const</span> html = matchArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                <span class="hljs-keyword">const</span> cityName = place.<span class="hljs-property">city</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                <span class="hljs-keyword">const</span> stateName = place.<span class="hljs-property">state</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">      &lt;li&gt;</span><br><span class="hljs-string">        &lt;span class=&quot;name&quot;&gt;<span class="hljs-subst">$&#123;cityName&#125;</span>, <span class="hljs-subst">$&#123;stateName&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">        &lt;span class=&quot;population&quot;&gt;<span class="hljs-subst">$&#123;numberWithCommas(place.population)&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">      &lt;/li&gt;</span><br><span class="hljs-string">    `</span>;<br>            &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>            suggestions.<span class="hljs-property">innerHTML</span> = html;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> searchInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.search&#x27;</span>);<br>        <span class="hljs-keyword">const</span> suggestions = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.suggestions&#x27;</span>);<br><br>        searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, displayMatches);<br>        searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, displayMatches);<br>    &lt;/script&gt;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><ol><li><p>如何获取资料？ 除axios之外，主要有两种方法：fetch和XTMLHttp </p><ul><li>fetch:  从 <code>fetch()</code> 返回的 Promise <strong>不会被标记为 reject</strong> ;  <code>fetch</code> <strong>不会发送跨域 cookie</strong>，除非你使用了 <em>credentials</em> 的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch#%E5%8F%82%E6%95%B0">初始化选项</a>。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// fetch请求设置</span><br><span class="hljs-title function_">fetch</span>(endpoint)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error))<br><br></code></pre></td></tr></table></figure><ul><li>fetch 获取信息有两种方式:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//1. 直接赋值 </span><br><span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br><span class="hljs-keyword">let</span> cities = <span class="hljs-literal">null</span><br><span class="hljs-title function_">fetch</span>(endpoint)<br><span class="hljs-comment">//将获取到的数据解析(json())</span><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities = data)<br><span class="hljs-comment">//成功获取数据</span><br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">cities</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(cities))<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//2. 解构赋值   设置空数组，利用解构一个一个放进数组</span><br><span class="hljs-keyword">const</span> endpoint = <span class="hljs-string">&#x27;https://gist.githubusercontent.com/Miserlou/c5cd8364bf9b2420bb29/raw/2bf258763cdddd704f8ffd3ea9a3e81d25e2c6f6/cities.json&#x27;</span><br><span class="hljs-keyword">const</span> cities = []<br><span class="hljs-title function_">fetch</span>(endpoint)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> <span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> cities.<span class="hljs-title function_">push</span>(...data))<br></code></pre></td></tr></table></figure></li><li><p>获取完数据之后，建立function findMatches(wordToMatch, cities)</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> find<span class="hljs-constructor">Matches(<span class="hljs-params">wordToMatch</span>, <span class="hljs-params">cities</span>)</span>&#123;<br>return cities.filter(place =&gt; &#123;<br>const regex = <span class="hljs-keyword">new</span> <span class="hljs-constructor">RegExp(<span class="hljs-params">wordToMatch</span>, &#x27;<span class="hljs-params">gi</span>&#x27;)</span><br>return place.city.<span class="hljs-keyword">match</span>(regex)<span class="hljs-operator"> || </span>place.state.<span class="hljs-keyword">match</span>(regex)<br>&#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>建立displayMatches()，并监听输入框的change和keyup。每一次输入都会触发。将对比的结果用map来return li</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">numberWithCommas</span>(<span class="hljs-params">x</span>) &#123;<br>              <span class="hljs-keyword">return</span> x.<span class="hljs-title function_">toString</span>().<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>          &#125;<br>  <br>          <span class="hljs-keyword">function</span> <span class="hljs-title function_">displayMatches</span>(<span class="hljs-params"></span>) &#123;<br>              <span class="hljs-keyword">const</span> matchArray = <span class="hljs-title function_">findMatches</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, cities);<br>              <span class="hljs-keyword">const</span> html = matchArray.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">place</span> =&gt;</span> &#123;<br>                  <span class="hljs-keyword">const</span> regex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, <span class="hljs-string">&#x27;gi&#x27;</span>);<br>                  <span class="hljs-keyword">const</span> cityName = place.<span class="hljs-property">city</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                  <span class="hljs-keyword">const</span> stateName = place.<span class="hljs-property">state</span>.<span class="hljs-title function_">replace</span>(regex, <span class="hljs-string">`&lt;span class=&quot;hl&quot;&gt;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.value&#125;</span>&lt;/span&gt;`</span>);<br>                  <span class="hljs-keyword">return</span> <span class="hljs-string">`</span><br><span class="hljs-string">        &lt;li&gt;</span><br><span class="hljs-string">          &lt;span class=&quot;name&quot;&gt;<span class="hljs-subst">$&#123;cityName&#125;</span>, <span class="hljs-subst">$&#123;stateName&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">          &lt;span class=&quot;population&quot;&gt;<span class="hljs-subst">$&#123;numberWithCommas(place.population)&#125;</span>&lt;/span&gt;</span><br><span class="hljs-string">        &lt;/li&gt;</span><br><span class="hljs-string">      `</span>;<br>              &#125;).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>              suggestions.<span class="hljs-property">innerHTML</span> = html;<br>          &#125;<br>  <br>          <span class="hljs-keyword">const</span> searchInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.search&#x27;</span>);<br>          <span class="hljs-keyword">const</span> suggestions = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.suggestions&#x27;</span>);<br>  <br>          searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, displayMatches);<br>          searchInput.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, displayMatches); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript 30 days</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>05-Flex Panel Gallery</title>
    <link href="/2022/08/26/x-Panel-Gallery/"/>
    <url>/2022/08/26/x-Panel-Gallery/</url>
    
    <content type="html"><![CDATA[<p><strong>1. 重点：利用DOM操作CSS</strong></p><p>前:</p><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>后:<br><img src="/images/pasted-3.png" alt="upload successful"></p><p>单图‘点击’后的效果<br><img src="/images/pasted-4.png" alt="upload successful"></p><p><strong>2. 核心思路</strong></p><ul><li><p>HTML： 整体由一个大的panels包含5个小的panel组成</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">panels</span>&quot;&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel1</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Hey</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Let</span>&#x27;<span class="hljs-symbol">s</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Dance</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel2</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Give</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Take</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Receive</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel3</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Experience</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">It</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Today</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel4</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Give</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">All</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">You</span> <span class="hljs-symbol">can</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br>        &lt;<span class="hljs-symbol">div</span> <span class="hljs-symbol">class</span>=&quot;<span class="hljs-symbol">panel</span> <span class="hljs-symbol">panel5</span>&quot;&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Life</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">In</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>            &lt;<span class="hljs-symbol">p</span>&gt;<span class="hljs-symbol">Motion</span>&lt;/<span class="hljs-symbol">p</span>&gt;<br>        &lt;/<span class="hljs-symbol">div</span>&gt;<br> &lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure></li><li><p>CSS：</p><p>   1.使用flex布局，设置flex-direction为column</p><p> 2.给first-child及last-child做位移效果，同时设置open-active，利用DOM操作CSS效果</p><p> 3.使用classList.toggle新增/移除动画class</p><p> 4.click&amp;transitionend事件触发toggle函数</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">html</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: border-box;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;helvetica neue&#x27;</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">200</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        *,</span><br><span class="language-css">        *<span class="hljs-selector-pseudo">::before</span>,</span><br><span class="language-css">        *<span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">box-sizing</span>: inherit;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panels</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">min-height</span>: <span class="hljs-number">100vh</span>;</span><br><span class="language-css">            <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css"></span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#6b0f9c</span>;</span><br><span class="language-css">            <span class="hljs-attribute">box-shadow</span>: inset <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0.1</span>);</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: white;</span><br><span class="language-css">            <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>:</span><br><span class="language-css">                font-size <span class="hljs-number">0.7s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.61</span>, -<span class="hljs-number">0.19</span>, <span class="hljs-number">0.7</span>, -<span class="hljs-number">0.11</span>),</span><br><span class="language-css">                flex <span class="hljs-number">0.7s</span> <span class="hljs-built_in">cubic-bezier</span>(<span class="hljs-number">0.61</span>, -<span class="hljs-number">0.19</span>, <span class="hljs-number">0.7</span>, -<span class="hljs-number">0.11</span>),</span><br><span class="language-css">                background <span class="hljs-number">0.2s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">background-size</span>: cover;</span><br><span class="language-css">            <span class="hljs-attribute">background-position</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span>;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">flex-direction</span>: column;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel1</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/gYl-UtwNg_I/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel2</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/rFKUFzjPYiQ/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel3</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://images.unsplash.com/photo-1465188162913-8fb5709d6d57?ixlib=rb-0.3.5&amp;q=80&amp;fm=jpg&amp;crop=faces&amp;cs=tinysrgb&amp;w=1500&amp;h=1500&amp;fit=crop&amp;s=967e8a713a4e395260793fc8c802901d</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel4</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/ITjiVXcwVng/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel5</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">https://source.unsplash.com/3MNzGlQM7qs/1500x1500</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;* &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">            <span class="hljs-attribute">transition</span>: transform <span class="hljs-number">0.5s</span>;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">1</span> <span class="hljs-number">0</span> auto;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: flex;</span><br><span class="language-css">            <span class="hljs-attribute">justify-content</span>: center;</span><br><span class="language-css">            <span class="hljs-attribute">align-items</span>: center;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;*<span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(-<span class="hljs-number">100%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open-active</span>&gt;*<span class="hljs-selector-pseudo">:first</span>-child &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span>&gt;*<span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">100%</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open-active</span>&gt;*<span class="hljs-selector-pseudo">:last-child</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0</span>);</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">text-transform</span>: uppercase;</span><br><span class="language-css">            <span class="hljs-attribute">font-family</span>: <span class="hljs-string">&#x27;Amatic SC&#x27;</span>, cursive;</span><br><span class="language-css">            <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">4px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.72</span>), <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">14px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.45</span>);</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">2em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) &#123;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">4em</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-class">.panel</span><span class="hljs-selector-class">.open</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">flex</span>: <span class="hljs-number">5</span>;</span><br><span class="language-css">            <span class="hljs-attribute">font-size</span>: <span class="hljs-number">40px</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-keyword">@media</span> <span class="hljs-keyword">only</span> screen <span class="hljs-keyword">and</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>) &#123;</span><br><span class="language-css">            <span class="hljs-selector-class">.panel</span> <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">                <span class="hljs-attribute">font-style</span>: <span class="hljs-number">1em</span>;</span><br><span class="language-css">            &#125;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>JS</li></ul> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> panels = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;.panel&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleOpen</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello&#x27;</span>);</span><br><span class="language-javascript">          <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;open&#x27;</span>)</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">toggleActive</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">propertyName</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">if</span> (e.<span class="hljs-property">propertyName</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;flex&#x27;</span>)) &#123;</span><br><span class="language-javascript">              <span class="hljs-variable language_">this</span>.<span class="hljs-property">classList</span>.<span class="hljs-title function_">toggle</span>(<span class="hljs-string">&#x27;open-active&#x27;</span>)</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript">      panels.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">panel</span> =&gt;</span> panel.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, toggleOpen))</span><br><span class="language-javascript">      panels.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">panel</span> =&gt;</span> panel.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;transitionend&#x27;</span>, toggleActive))</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript 30 days</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
